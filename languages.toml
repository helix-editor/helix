[[language]]
name = "rust"
display-name = "Rust"
scope = "source.rust"
injection-regex = "rust"
file-types = ["rs"]
roots = []
auto-format = true
comment-token = "//"
language-server = { command = "rust-analyzer" }
indent = { tab-width = 4, unit = "    " }
[language.config]
cargo = { loadOutDirsFromCheck = true }
procMacro = { enable = false }

[[language]]
name = "toml"
display-name = "TOML"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml"]
roots = []
comment-token = "#"

indent = { tab-width = 2, unit = "  " }

[[language]]
name = "protobuf"
display-name = "Protobuf"
scope = "source.proto"
injection-regex = "protobuf"
file-types = ["proto"]
roots = []
comment-token = "//"

indent = { tab-width = 2, unit = "  " }

[[language]]
name = "elixir"
display-name = "Elixir"
scope = "source.elixir"
injection-regex = "elixir"
file-types = ["ex", "exs"]
shebangs = ["elixir"]
roots = []
comment-token = "#"

language-server = { command = "elixir-ls" }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "mint"
display-name = "Mint"
scope = "source.mint"
injection-regex = "mint"
file-types = ["mint"]
shebangs = []
roots = []
comment-token = "//"

language-server = { command = "mint", args = ["ls"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "json"
display-name = "JSON"
scope = "source.json"
injection-regex = "json"
file-types = ["json"]
roots = []

indent = { tab-width = 2, unit = "  " }

[[language]]
name = "c"
display-name = "C"
scope = "source.c"
injection-regex = "c"
file-types = ["c"] # TODO: ["h"]
roots = []
comment-token = "//"

language-server = { command = "clangd" }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "cpp"
display-name = "C++"
scope = "source.cpp"
injection-regex = "cpp"
file-types = ["cc", "hh", "cpp", "hpp", "h", "ipp", "tpp", "cxx", "hxx", "ixx", "txx", "ino"]
roots = []
comment-token = "//"

language-server = { command = "clangd" }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "c-sharp"
display-name = "C#"
scope = "source.csharp"
injection-regex = "c-?sharp"
file-types = ["cs"]
roots = []
comment-token = "//"

indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "go"
display-name = "Go"
scope = "source.go"
injection-regex = "go"
file-types = ["go"]
roots = ["Gopkg.toml", "go.mod"]
auto-format = true
comment-token = "//"

language-server = { command = "gopls" }
# TODO: gopls needs utf-8 offsets?
indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "javascript"
display-name = "JavaScript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = ["js", "mjs"]
shebangs = ["node"]
roots = []
comment-token = "//"
# TODO: highlights-jsx, highlights-params

indent = { tab-width = 2, unit = "  " }

[[language]]
name = "typescript"
display-name = "TypeScript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = ["ts"]
shebangs = []
roots = []
# TODO: highlights-jsx, highlights-params

language-server = { command = "typescript-language-server", args = ["--stdio"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "tsx"
display-name = "TSX"
scope = "source.tsx"
injection-regex = "^(tsx)$" # |typescript
file-types = ["tsx"]
roots = []
# TODO: highlights-jsx, highlights-params

language-server = { command = "typescript-language-server", args = ["--stdio"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "css"
display-name = "CSS"
scope = "source.css"
injection-regex = "css"
file-types = ["css"]
roots = []

indent = { tab-width = 2, unit = "  " }

[[language]]
name = "html"
display-name = "HTML"
scope = "text.html.basic"
injection-regex = "html"
file-types = ["html"]
roots = []

indent = { tab-width = 2, unit = "  " }

[[language]]
name = "python"
display-name = "Python"
scope = "source.python"
injection-regex = "python"
file-types = ["py"]
shebangs = ["python"]
roots = []
comment-token = "#"

language-server = { command = "pylsp" }
# TODO: pyls needs utf-8 offsets
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "nix"
display-name = "Nix"
scope = "source.nix"
injection-regex = "nix"
file-types = ["nix"]
shebangs = []
roots = []
comment-token = "#"

language-server = { command = "rnix-lsp" }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "ruby"
display-name = "Ruby"
scope = "source.ruby"
injection-regex = "ruby"
file-types = ["rb"]
shebangs = ["ruby"]
roots = []
comment-token = "#"

language-server = { command = "solargraph", args = ["stdio"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "bash"
display-name = "Bash"
scope = "source.bash"
injection-regex = "bash"
file-types = ["sh", "bash"]
shebangs = ["sh", "bash", "dash"]
roots = []
comment-token = "#"

language-server = { command = "bash-language-server", args = ["start"] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "php"
display-name = "PHP"
scope = "source.php"
injection-regex = "php"
file-types = ["php"]
shebangs = ["php"]
roots = []

indent = { tab-width = 4, unit = "    " }

[[language]]
name = "latex"
display-name = "LaTeX"
scope = "source.tex"
injection-regex = "tex"
file-types = ["tex"]
roots = []
comment-token = "%"

indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "julia"
display-name = "Julia"
scope = "source.julia"
injection-regex = "julia"
file-types = ["jl"]
roots = []
comment-token = "#"
language-server = { command = "julia", args = [
        "--startup-file=no",
        "--history-file=no",
        "--quiet",
        "-e",
        """
                using LanguageServer;
                using Pkg;
                import StaticLint;
                env_path = dirname(Pkg.Types.Context().env.project_file);

                server = LanguageServer.LanguageServerInstance(stdin, stdout, env_path, "");
                server.runlinter = true;
                run(server);
        """,
        ] }
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "java"
display-name = "Java"
scope = "source.java"
injection-regex = "java"
file-types = ["java"]
roots = []
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "ledger"
display-name = "Ledger"
scope = "source.ledger"
injection-regex = "ledger"
file-types = ["ldg", "ledger", "journal"]
roots = []
comment-token = ";"
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "ocaml"
display-name = "OCaml"
scope = "source.ocaml"
injection-regex = "ocaml"
file-types = ["ml"]
shebangs = []
roots = []
comment-token = "(**)"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "ocaml-interface"
display-name = "OCaml-Interface"
scope = "source.ocaml.interface"
file-types = ["mli"]
shebangs = []
roots = []
comment-token = "(**)"
indent = { tab-width = 2, unit = "  "}

[[language]]
name = "lua"
display-name = "Lua"
scope = "source.lua"
file-types = ["lua"]
shebangs = ["lua"]
roots = []
comment-token = "--"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "svelte"
display-name = "Svelte"
scope = "source.svelte"
injection-regex = "svelte"
file-types = ["svelte"]
roots = []
indent = { tab-width = 2, unit = "  " }
language-server = { command = "svelteserver", args = ["--stdio"] }


[[language]]
name = "vue"
display-name = "Vue"
scope = "source.vue"
injection-regex = "vue"
file-types = ["vue"]
roots = []
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "yaml"
display-name = "YAML"
scope = "source.yaml"
file-types = ["yml", "yaml"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

# [[language]]
# name = "haskell"
# display-name = "Haskell"
# scope = "source.haskell"
# injection-regex = "haskell"
# file-types = ["hs"]
# roots = []
# comment-token = "--"
#
# indent = { tab-width = 2, unit = "  " }

[[language]]
name = "zig"
display-name = "Zig"
scope = "source.zig"
injection-regex = "zig"
file-types = ["zig"]
roots = ["build.zig"]
auto-format = true
comment-token = "//"

language-server = { command = "zls" }
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "prolog"
display-name = "Prolog"
scope = "source.prolog"
roots = []
file-types = ["pl", "prolog"]
shebangs = ["swipl"]
comment-token = "%"

language-server = { command = "swipl", args = [
    "-g", "use_module(library(lsp_server))",
    "-g", "lsp_server:main",
    "-t", "halt", "--", "stdio"] }

[[language]]
name = "tsq"
display-name = "TSQ"
scope = "source.tsq"
file-types = ["scm"]
roots = []
comment-token = ";"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "cmake"
display-name = "CMake"
scope = "source.cmake"
file-types = ["cmake", "CMakeLists.txt"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }
language-server = { command = "cmake-language-server" }

[[language]]
name = "glsl"
display-name = "GLSL"
scope = "source.glsl"
file-types = ["glsl", "vert", "tesc", "tese", "geom", "frag", "comp" ]
roots = []
comment-token = "//"
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "perl"
display-name = "Perl"
scope = "source.perl"
file-types = ["pl", "pm"]
shebangs = ["perl"]
roots = []
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "racket"
display-name = "Racket"
scope = "source.rkt"
roots = []
file-types = ["rkt"]
shebangs = ["racket"]
comment-token = ";"
language-server = { command = "racket", args = ["-l", "racket-langserver"] }

[[language]]
name = "wgsl"
display-name = "WGSL"
scope = "source.wgsl"
file-types = ["wgsl"]
roots = []
comment-token = "//"
indent = { tab-width = 4, unit = "    " }

[[language]]
name = "llvm"
display-name = "LLVM"
scope = "source.llvm"
roots = []
file-types = ["ll"]
comment-token = ";"
indent = { tab-width = 2, unit = "  " }
